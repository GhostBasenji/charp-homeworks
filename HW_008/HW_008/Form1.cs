// Программа, реализующая функции калькулятора.
// Здесь для отображения вариантов выбора арифметических действий используется комбинированный список ComboBox
namespace HW_008
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            base.Text = "Калькулятор"; label1.Text = "Равно: ";
            comboBox1.Text = "Выбор операции";

            // Заполнение (инициализация) списка:
            String[] Operations = { "Прибавить", "Отнять", "Умножить", "Разделить", "Очистить" };
            comboBox1.Items.AddRange(Operations);
            comboBox1.TabIndex = 2;

            textBox1.Clear(); textBox1.TabIndex = 0;
            textBox2.Clear(); textBox2.TabIndex = 1;
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            // Обработка события изменения индекса выбранного элемента
            label1.Text = "Равно: ";

            // Преобразование из строковой переменной в Single:
            Single X, Y, Z; Z = 0;

            var Number_1 = Single.TryParse(textBox1.Text,
                System.Globalization.NumberStyles.Number,
                System.Globalization.NumberFormatInfo.CurrentInfo,
                out X);
            var Number_2 = Single.TryParse(textBox2.Text,
                System.Globalization.NumberStyles.Number,
                System.Globalization.NumberFormatInfo.CurrentInfo,
                out Y);

            if (Number_1 == false || Number_2 == false)
            {
                MessageBox.Show("Следует вводить числа!", "Ошибка",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                return; // если ошибка, то выходим из процедуры
            }

            // Оператор множественного выбора:
            switch (comboBox1.SelectedIndex)
            {
                case 0:
                    Z = X + Y; break;
                case 1:
                    Z = X - Y; break;
                case 2:
                    Z = X * Y; break;
                case 3:
                    Z = X / Y; break;
                case 4:
                    textBox1.Clear(); textBox2.Clear();
                    label1.Text = "Равно: "; return;
            }
            label1.Text = String.Format("Равно: {0:F5}", Z);
        }
    }
}

// Табличный индекс определяет порядок обхода элементов.
// Так, при старте программы фокус будет находиться в первом текстовом поле, поскольку мы назначили textBox1.TabIndex = 0.
// Далее при нажатии пользователем клавиши <Tab> будет происходить переход от элемента к элементу соответственно табличным индексам

// При обработке события "изменение индекса выбранного элемента" comboBox1_SelectedIndexChanged с помощью функции TryParse проверяем, можно ли текстовые 
// поля преобразовать в число.
// Первым параметром метода TryParse является анализируемое поле.
// Второй параметр — это разрешаемый для преобразования стиль числа, в данном случае типа Number, т. е. десятичное число, которое имеет целую и дробную части.
// Третий параметр указывает, на какой основе формируется допустимый формат, в нашем случае мы использовали CurrentInfo, т. е. на основе текущего языка и региональных параметров.
// Четвертый параметр метода TryParse возвращает результат преобразования.
// Кроме того, функция TryParse возвращает булеву переменную true или false, которая сообщает, успешно ли выполнено преобразование.
// Как видно из текста программы, если хотя бы одно поле невозможно преобразовать в число, то программируем сообщение "Следует вводить числа!" и выход из процедуры обработки события с помощью оператора return.

// Далее оператор switch осуществляет множественный выбор арифметической операции в зависимости от индекса выбранного элемента списка SelectedIndex.
// Оператор switch case передает управление той или иной метке case.

// ВНИМАНИЕ! 
// Оператор множественного выбора в C# и C++, как говорят программисты, "проваливается". Т.е. управление, зайдя на какую-либо метку case, переходит 
// на следующую метку, поэтому приходится использовать оператор break.

// Последний оператор в процедуре обработки события изменения индекса выбранного элемента осуществляет формирование строки с помощью метода String.Format для вывода ее на метку label1.
// Формат "{0:F5}" означает, что значение переменной Z следует выводить по фиксированному формату с пятью знаками после запятой (или точки). 

